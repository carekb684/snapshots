
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:snap_shots/model/LoggedUser.dart';
import 'package:snap_shots/model/UserData.dart';
import 'package:snap_shots/screens/util/loading.dart';
import 'package:snap_shots/serializer/fire_serialize.dart';
import 'package:snap_shots/service/auth_service.dart';
import 'package:snap_shots/service/firestore.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatefulWidget {
  AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<LoggedUser>) builder;

  @override
  _AuthWidgetBuilderState createState() => _AuthWidgetBuilderState();
}

class _AuthWidgetBuilderState extends State<AuthWidgetBuilder> {
  LoggedUser user;
  FirestoreService fireServ;

  UserData userData = null;

  bool runOnce = true;

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    print('AuthWidgetBuilder rebuild');
    final authService = Provider.of<AuthService>(context, listen: false);
    return StreamBuilder<LoggedUser>(
      stream: authService.onAuthStateChanged,
      builder: (context, snapshot) {
        print('StreamBuilder: ${snapshot.connectionState}');
        user = snapshot.data;
        if (user != null && runOnce) {
          getUserFirestore(user);
          runOnce = false;
        }

        if (userData == null && user != null && !runOnce) {
          //need to wait for userData to load
          return Container();
        }

          if (userData != null) {
            return MultiProvider(
              providers: [
                Provider<UserData>.value(value: userData),
              ],
              child: widget.builder(context, snapshot),
            );
          }


        return widget.builder(context, snapshot);
      },
    );
  }

  getUserFirestore(LoggedUser user) {
    fireServ = FirestoreService();
    fireServ.getUser(user.uid).then((value) {
      var map = value.data();
      setState(() {
        userData = FireSerialize.toUserData(map);
      });

    });
  }

}
